<?php
/**
 * 2007-2019 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 *  @author    Zido <jguilloux@gmail.com>
 *  @copyright 2019-2020 Zido
 *  @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 *  https://github.com/jguilloux71/
 */

if (!defined('_PS_VERSION_')) {
    exit;
}


class Gdpr extends Module {

    public function __construct() {
        $this->name = 'gdpr';
        $this->tab = 'administration';
        $this->version = '1.1.0';
        $this->author = 'Zido';
        $this->need_instance = 0;
        $this->ps_versions_compliancy = array('min' => '1.6', 'max' => '1.7');
        $this->bootstrap = true;

        parent::__construct();

        $this->displayName = $this->l('GDPR');
        $this->description = $this->l('Add a cookies consent banner and text about privacy data.');
        $this->confirmUninstall = $this->l('Are you sure you want to uninstall?');

        // array(label, default value, html render boolean)
        $this->options = array(
            'COOKIES_CONSENT_TEXT'                  => array($this->l('Consent message'), $this->l('This website uses cookies to ensure you get the best experience on our website.'), false),
            'COOKIES_POPUP_BACKGROUND_COLOR'        => array($this->l('Banner background color'), '#8A2F29', false),
            'COOKIES_POPUP_BACKGROUND_TRANSPARENCY' => array($this->l('Banner background transparency (in %)'), '20', false),
            'COOKIES_POPUP_TEXT_COLOR'              => array($this->l('Banner text color'), '#FFFFFF', false),
            'COOKIES_BUTTON_BACKGROUND_COLOR'       => array($this->l('Button background color'), '#101010', false),
            'COOKIES_BUTTON_TEXT_COLOR'             => array($this->l('Button text color'), '#FFFFFF', false),
            'COOKIES_DELAY_BEFORE_NEW_POPUP'        => array($this->l('Delay before a new display of the banner (in days)'), '365', false),
            'PRIVACY_DATA_RADIO'                    => array($this->l('Select where is stored your privacy data policy'), 'link', false),
            'PRIVACY_DATA_LINK'                     => array($this->l('Privacy data link'), 'http://my.url/privacy-data', false),
            'PRIVACY_DATA_TEXT'                     => array($this->l('Privacy data text'), $this->l('Privacy data text here'), true)
        );

        $this->_checkNeedConfiguration();
    }


    private function _checkNeedConfiguration() {
        if (!Configuration::get('COOKIES_CONSENT_TEXT')) {
            $this->warning = $this->l('GDPR module need to be configured');
        }

        if (!Configuration::get('PRIVACY_DATA_LINK') && !Configuration::get('PRIVACY_DATA_TEXT')) {
            $this->warning = $this->l('GDPR module need to be configured');
        }
    }
    

    public function install() {
        return parent::install()
            && $this->registerHook('header')
            && $this->_updateAllDefaultValues();
    }
    
    
    private function _updateAllDefaultValues() {
        $no_err = true;
        foreach ($this->options as $key => $value) {
            Configuration::updateValue($key, $value[1], $value[2]) || $no_err = false;
        }
        return $no_err;
    }


    public function uninstall() {
        return parent::uninstall()
            && $this->_deleteAllValues();
    }


    private function _deleteAllValues() {
        $no_err = true;
        foreach ($this->options as $key => $value) {
            Configuration::deleteByName($key) || $no_err = false;
        }
        return $no_err;
    }


    /**
     * Get HTML link for 'learn more'
     *
     * HTML link depending of selected radio button
     *
     * If privacy data radio button is 'HTML link' then link will be PRIVACY_DATA_LINK
     * Else link will be the autogenerated URL by template 'privacydata'
     */
    private function _getPrivacyDataLink() {
        $privacy_data_link = Configuration::get('PRIVACY_DATA_LINK');

        if (Configuration::get('PRIVACY_DATA_RADIO') == 'custom-text') {
            $privacy_data_link = $this->context->link->getModuleLink('gdpr', 'privacydata');
        }

        return $privacy_data_link;
    }


    public function hookDisplayHeader() {
        // Specific CSS for 'cookies consent', in <HEAD> tag
        $this->context->controller->addCSS($this->_path . 'views/css/cookies-consent.css', 'all');

        // JS for cookies consent (from https://www.osano.com/cookieconsent), in <HEAD> tag
        $this->context->controller->addJS($this->_path . 'views/js/cookies-consent.js', 'all');

        // For translations in template files
        $this->context->smarty->assign(
            array(
                'gdpr_cookies_consent_text' => Configuration::get('COOKIES_CONSENT_TEXT'),
                'gdpr_cookies_popup_background_color' => Configuration::get('COOKIES_POPUP_BACKGROUND_COLOR'),
                'gdpr_cookies_popup_background_transparency' => Configuration::get('COOKIES_POPUP_BACKGROUND_TRANSPARENCY'),
                'gdpr_cookies_popup_text_color' => Configuration::get('COOKIES_POPUP_TEXT_COLOR'),
                'gdpr_cookies_button_background_color' => Configuration::get('COOKIES_BUTTON_BACKGROUND_COLOR'),
                'gdpr_cookies_button_text_color' => Configuration::get('COOKIES_BUTTON_TEXT_COLOR'),
                'gdpr_cookies_delay_before_new_popup' => Configuration::get('COOKIES_DELAY_BEFORE_NEW_POPUP'),
                'gdpr_privacy_data_link' => $this->_getPrivacyDataLink(),
                'gdpr_privacy_data_text' => Configuration::get('PRIVACY_DATA_TEXT')
            )
        );
        return $this->display(__FILE__, 'gdpr.tpl');
    }


    public function getContent() {
        $output = null;
        $errors = 0;
        $form_fields = array();      // to store values of fields from module form
 
        if (Tools::isSubmit('submit' . $this->name)) {
            foreach ($this->options as $key => $value) {
                $form_fields = array_merge($form_fields, array($key => strval(Tools::getValue($key))));
            }

            if (empty($form_fields[COOKIES_CONSENT_TEXT])) {
                $errors += 1;
                $output .= $this->displayError( $this->l('Invalid cookies consent message'));
            }

            if (empty($form_fields[COOKIES_POPUP_BACKGROUND_COLOR])) {
                $errors += 1;
                $output .= $this->displayError( $this->l('Invalid value for cookies banner background color') );
            }

            if (empty($form_fields[COOKIES_POPUP_TEXT_COLOR])) {
                $errors += 1;
                $output .= $this->displayError( $this->l('Invalid value for cookies banner text color') );
            }

            if (empty($form_fields[COOKIES_BUTTON_BACKGROUND_COLOR])) {
                $errors += 1;
                $output .= $this->displayError( $this->l('Invalid value for cookies button background color') );
            }

            if (empty($form_fields[COOKIES_BUTTON_TEXT_COLOR])) {
                $errors += 1;
                $output .= $this->displayError( $this->l('Invalid value for cookies button text color') );
            }

            if (empty($form_fields[COOKIES_DELAY_BEFORE_NEW_POPUP])
                || intval($form_fields[COOKIES_DELAY_BEFORE_NEW_POPUP]) < 1
                || intval($form_fields[COOKIES_DELAY_BEFORE_NEW_POPUP]) > 365) {
                $errors += 1;
                $output .= $this->displayError( $this->l('Invalid value for cookies banner delay before new display [must be between 1 and 365]') );
            }

            if (($form_fields[PRIVACY_DATA_RADIO] == 'link') && ((!$form_fields[PRIVACY_DATA_LINK]) || empty($form_fields[PRIVACY_DATA_LINK]))) {
                $errors += 1;
                $output .= $this->displayError( $this->l('Invalid privacy data link'));
            }

            if (($form_fields[PRIVACY_DATA_RADIO] == 'custom-text') && ((!$form_fields[PRIVACY_DATA_TEXT]) || empty($form_fields[PRIVACY_DATA_TEXT]))) {
                $errors += 1;
                $output .= $this->displayError( $this->l('Invalid privacy data custom text'));
            }

            if ($errors == 0) {
                // Update values in database
                if (!$this->_updateCurrentValues($form_fields)) {
                    $output .= $this->displayConfirmation($this->l('Settings: error during update of values in database!'));
                }
                else {
                    $output .= $this->displayConfirmation($this->l('Settings updated'));
                }
            }
            elseif ($errors == 1) {
                $output .= $this->displayError('1 ' . $this->l('error found'));
            }
            else {
                $output .= $this->displayError($errors . ' ' . $this->l('errors found'));
            }
        }

        return $output . $this->displayForm();
    }


    private function _updateCurrentValues($current) {
        $no_err = true;
        foreach ($this->options as $key => $value) {
            Configuration::updateValue($key, $current[$key], $value[2]) || $no_err = false;
        }
        return $no_err;
    }


    public function displayForm() {
        // Init Fields form array
        $fields_form[0]['form'] = array(
            'legend' => array(
                'title' => $this->l('Settings'),
                'icon' => 'icon-cogs'
            ),
            'tabs' => array(
                'cookies' => $this->l('Cookies consent settings'),
                'privacy-data' => $this->l('Privacy data settings'),
            ),
            'input' => array(
                array(
                    'type' => 'text',
                    'label' => $this->options['COOKIES_CONSENT_TEXT'][0],
                    'name' => 'COOKIES_CONSENT_TEXT',
                    'size' => 100,
                    'required' => true,
                    'tab' => 'cookies'
                ),
                array(
                    'type' => 'text',
                    'label' => $this->options['COOKIES_POPUP_BACKGROUND_COLOR'][0],
                    'name' => 'COOKIES_POPUP_BACKGROUND_COLOR',
                    'size' => 8,
                    'required' => true,
                    'tab' => 'cookies'
                ),
                array(
                    'type' => 'select',
                    'label' => $this->options['COOKIES_POPUP_BACKGROUND_TRANSPARENCY'][0],
                    'name' => 'COOKIES_POPUP_BACKGROUND_TRANSPARENCY',
                    'required' => true,
                    'default_value' => 20,
                    'options' => array(
                        'query' => array(
                            array('id' => 0, 'name' => 0),
                            array('id' => 5, 'name' => 5),
                            array('id' => 10, 'name' => 10),
                            array('id' => 15, 'name' => 15),
                            array('id' => 20, 'name' => 20),
                            array('id' => 25, 'name' => 25)
                        ),
                        'id' => 'id',
                        'name' => 'name'
                    ),
                    'tab' => 'cookies'
                ),
                array(
                    'type' => 'text',
                    'label' => $this->options['COOKIES_POPUP_TEXT_COLOR'][0],
                    'name' => 'COOKIES_POPUP_TEXT_COLOR',
                    'size' => 8,
                    'required' => true,
                    'tab' => 'cookies'
                ),
                array(
                    'type' => 'text',
                    'label' => $this->options['COOKIES_BUTTON_BACKGROUND_COLOR'][0],
                    'name' => 'COOKIES_BUTTON_BACKGROUND_COLOR',
                    'size' => 8,
                    'required' => true,
                    'tab' => 'cookies'
                ),
                array(
                    'type' => 'text',
                    'label' => $this->options['COOKIES_BUTTON_TEXT_COLOR'][0],
                    'name' => 'COOKIES_BUTTON_TEXT_COLOR',
                    'size' => 8,
                    'required' => true,
                    'tab' => 'cookies'
                ),
                array(
                    'type' => 'text',
                    'label' => $this->options['COOKIES_DELAY_BEFORE_NEW_POPUP'][0],
                    'name' => 'COOKIES_DELAY_BEFORE_NEW_POPUP',
                    'size' => 4,
                    'required' => true,
                    'tab' => 'cookies'
                ),
                array(
                    'type' => 'radio',
                    'label' => $this->options['PRIVACY_DATA_RADIO'][0],
                    'name' => 'PRIVACY_DATA_RADIO',
                    'required' => true,
                    'class' => 't',
                    'tab' => 'privacy-data',
                    'is_bool' => true,
                    'values' => array(
                        array(
                            'id' => 'privacy-data-radio-link',
                            'value'=> 'link',
                            'label'=> $this->l('From the link below'),
                        ),
                        array(
                            'id' => 'privacy-data-radio-text',
                            'value'=> 'custom-text',
                            'label'=> $this->l('From your custom text below'),
                        ),
                    ),
                ),
                array(
                    'type' => 'text',
                    'label' => $this->options['PRIVACY_DATA_LINK'][0],
                    'name' => 'PRIVACY_DATA_LINK',
                    'size' => 8,
                    'tab' => 'privacy-data'
                ),
                array(
                    'type' => 'textarea',
                    'label' => $this->options['PRIVACY_DATA_TEXT'][0],
                    'name' => 'PRIVACY_DATA_TEXT',
                    'lang' => 0,
                    'class' => 'rte',
                    'row' => 32,
                    'autoload_rte' => true,
                    'hint' => $this->l('Invalid characters: ') . ' <>;=#{}',
                    'tab' => 'privacy-data'
                )
            ),
            'submit' => array(
                'title' => $this->l('Save'),
                'class' => 'button btn btn-default pull-right'
            )
        );
     
        return $this->_helperForm($fields_form);
    }


    private function _helperForm($form) {
        // Get default Language
        $default_lang = (int)Configuration::get('PS_LANG_DEFAULT');

        $helper = new HelperForm();

        // Module, token and currentIndex
        $helper->module = $this;
        $helper->name_controller = $this->name;
        $helper->token = Tools::getAdminTokenLite('AdminModules');
        $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name;
     
        // Language
        $helper->default_form_language = $default_lang;
        $helper->allow_employee_form_lang = $default_lang;
     
        // Title and toolbar
        $helper->title = $this->displayName;
        $helper->show_toolbar = true;        // false -> remove toolbar
        $helper->toolbar_scroll = true;      // yes - > Toolbar is always visible on the top of the screen.
        $helper->submit_action = 'submit' . $this->name;
        $helper->toolbar_btn = array(
            'save' => array(
                'desc' => $this->l('Save'),
                'href' => AdminController::$currentIndex . '&configure=' . $this->name . '&save' . $this->name.
                '&token='.Tools::getAdminTokenLite('AdminModules'),
            ),
            'back' => array(
                'href' => AdminController::$currentIndex . '&token=' . Tools::getAdminTokenLite('AdminModules'),
                'desc' => $this->l('Back to list')
            )
        );

        // Load current value
        foreach ($this->options as $key => $value) {
            $helper->fields_value[$key] = Configuration::get($key);
        }

        return $helper->generateForm($form);
    }
}
?>
